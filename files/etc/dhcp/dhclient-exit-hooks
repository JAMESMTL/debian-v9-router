#!/bin/sh

###################################################
# Recived Parameters
###################################################
# Example. Multiple answers as space seperated list
# $reason='BOUND'
# $interface='eth0'
# $new_ip_address='192.168.1.2'
# $new_host_name='TESTHOST'
# $new_network_number='192.168.1.0'
# $new_subnet_mask='255.255.255.0'
# $new_broadcast_address='192.168.1.255'
# $new_routers='192.168.1.1'
# $new_domain_name='lan'
# $new_domain_name_servers='192.168.1.1'
# $old_ip_address='192.168.1.2'
# $old_host_name='TESTHOST'
# $old_network_number='192.168.1.0'
# $old_subnet_mask='255.255.255.0'
# $old_broadcast_address='192.168.1.255'
# $old_routers='192.168.1.1'
# $old_domain_name='lan'
# $old_domain_name_servers='192.168.1.1'
###################################################

###################################################
# Start Functions
###################################################

# thanks to https://stackoverflow.com/questions/20762575/explanation-of-convertor-of-cidr-to-netmask-in-linux-shell-netmask2cdir-and-cdir
mask2cdr ()
{
   # Assumes there's no "255." after a non-255 byte in the mask
   local x=${1##*255.}
   set -- 0^^^128^192^224^240^248^252^254^ $(( (${#1} - ${#x})*2 )) ${x%%.*}
   x=${1%%$3*}
   echo $(( $2 + (${#x}/4) ))
}


cdr2mask ()
{
   # Number of args to shift, 255..255, first non-255 byte, zeroes
   set -- $(( 5 - ($1 / 8) )) 255 255 255 255 $(( (255 << (8 - ($1 % 8))) & 255 )) 0 0 0
   [ $1 -gt 1 ] && shift $1 || shift
   echo ${1-0}.${2-0}.${3-0}.${4-0}
}

###################################################
# End Functions
###################################################


###################################################
# Passed Parameters to SYSVARS directory
###################################################
# ${IF}-local: Local IP
# ${IF}-prefix: Prefix
# ${IF}-gateway: Gateway IP
# ${IF}-dns: DNS Servers
###################################################

# Set SYSVARS path
SYSVARS=/tmp/sysvars
[ -d $SYSVARS ] || mkdir -p $SYSVARS


case "$interface" in

	wan0.36)

		# Clear default route
		ip route del default via $new_routers dev wan0.36 2>/dev/null

		# Write vars to SYSVARS dir
		[ ! -z "$new_ip_address" ] && echo "$new_ip_address" > ${SYSVARS}/iptv-local
		[ ! -z "$new_routers" ] && echo "$new_routers" > ${SYSVARS}/iptv-gateway
		[ ! -z "$new_subnet_mask" ] && echo "${new_network_number}/$(mask2cdr ${new_subnet_mask})" > ${SYSVARS}/iptv-prefix
		[ ! -z "$new_domain_name_servers" ] && echo "$new_domain_name_servers" > ${SYSVARS}/iptv-dns

		# Create custom dnsmasq dns option for IPTV receivers to use provider dns servers
		echo "dhcp-option=tag:dns-iptv,option:dns-server,"$( echo "$new_domain_name_servers" | sed 's/ /,/' ) > /tmp/dnsmasq.iptv

		# Reload dnsmasq if rDNS servers change
		[ "$new_domain_name_servers" != "$old_domain_name_servers" ] && service dnsmasq restart

		;;
         
	*)
		# Write vars to SYSVARS dir
		[ ! -z "$new_ip_address" ] && echo "$new_ip_address" > ${SYSVARS}/${interface}-local
		[ ! -z "$new_routers" ] && echo "$new_routers" > ${SYSVARS}/${interface}-gateway
		[ ! -z "$new_subnet_mask" ] && echo "${new_network_number}/$(mask2cdr ${new_subnet_mask})" > ${SYSVARS}/${interface}-prefix
		[ ! -z "$new_domain_name_servers" ] && echo "$new_domain_name_servers" > ${SYSVARS}/${interface}-dns
		;;

esac


###################################################
# End sysvars
###################################################


exit 0